generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id Int @id @default(autoincrement())

    email    String  @unique
    fullName String
    password String
    role     Role    @default(USER)
    verified Boolean @default(false)

    provider   String?
    providerId String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    cart             Cart?
    cartId           Int?
    orders           Order[]
    verificationCode VerificationCode?
}

model Category {
    id Int @id @default(autoincrement())

    name String @unique

    products Product[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Product {
    id Int @id @default(autoincrement())

    name     String
    imageUrl String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    category   Category @relation(fields: [categoryId], references: [id])
    categoryId Int

    ingredient  Ingredient[]
    productItem ProductItem[]
}

model ProductItem {
    id Int @id @default(autoincrement())

    quantity  Int
    price     Int
    size      Int?
    pizzeType Int?

    product   Product @relation(fields: [productId], references: [id])
    productId Int

    createdAt DateTime   @default(now())
    updatedAt DateTime   @updatedAt
    cartItem  CartItem[]
}

model Ingredient {
    id Int @id @default(autoincrement())

    name     String @unique
    price    Int
    imageUrl String

    product  Product[]
    cartItem CartItem[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Cart {
    id Int @id @default(autoincrement())

    user   User? @relation(fields: [userId], references: [id])
    userId Int   @unique

    totalAmount Int

    token String

    cartItem CartItem[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model CartItem {
    id Int @id @default(autoincrement())

    cart   Cart @relation(fields: [cartId], references: [id])
    cartId Int

    productItem   ProductItem @relation(fields: [productItemId], references: [id])
    productItemId Int

    quantity Int

    ingredients Ingredient[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Order {
    id Int @id @default(autoincrement())

    user   User? @relation(fields: [userId], references: [id])
    userId Int?

    totalAmount Int

    token String

    status OrderStatus

    orderItems Json

    paymentId String?

    fullName String
    email    String
    phone    String
    comment  String
    address  String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model VerificationCode {
    id Int @id @default(autoincrement())

    code String @unique

    user   User @relation(fields: [userId], references: [id])
    userId Int  @unique

    createdAt DateTime @default(now())

    @@unique([userId, code])
}

enum OrderStatus {
    PENDING
    SUCCEEDED
    CANCELLED
}

enum Role {
    ADMIN
    USER
}
